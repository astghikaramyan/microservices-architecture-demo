package com.example.resourceservice.componenttests;

import com.example.resourceservice.client.SongServiceClient;
import com.example.resourceservice.controller.ResourceRestController;
import com.example.resourceservice.entity.ResourceEntity;
import com.example.resourceservice.integrationtests.config.S3BucketInitializer;
import com.example.resourceservice.repository.ResourceRepository;
import com.example.resourceservice.service.ResourceService;
import com.example.resourceservice.service.StorageService;
import com.example.resourceservice.util.DataPreparerService;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.cloud.stream.function.StreamBridge;
import org.springframework.http.MediaType;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import software.amazon.awssdk.core.ResponseBytes;
import software.amazon.awssdk.services.s3.model.GetObjectResponse;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@Transactional
class ResourceServiceComponentTest {

    @Autowired
    private ResourceRestController resourceRestController;

    @Autowired
    private DataSource dataSource;

    @Autowired
    private ResourceRepository resourceRepository;

    @Autowired
    private ResourceService resourceService;

    @Autowired
    private DataPreparerService dataPreparerService;

    @MockBean
    private StreamBridge streamBridge;

    @MockBean
    private StorageService storageService;
    @MockBean
    private S3BucketInitializer s3BucketInitializer;
    @MockBean
    private SongServiceClient songServiceClient;

    private MockMvc mockMvc;

    // -----------------------------
    // Override datasource dynamically
    // -----------------------------
    @DynamicPropertySource
    static void configureTestProperties(DynamicPropertyRegistry registry) {
        // H2 in-memory DB
        registry.add("spring.datasource.url",
                () -> "jdbc:h2:mem:testdb;DATABASE_TO_LOWER=TRUE;DB_CLOSE_DELAY=-1;MODE=PostgreSQL");
        registry.add("spring.datasource.driver-class-name", () -> "org.h2.Driver");
        registry.add("spring.datasource.username", () -> "sa");
        registry.add("spring.datasource.password", () -> "");
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create-drop");
        registry.add("spring.jpa.database-platform", () -> "org.hibernate.dialect.H2Dialect");
        registry.add("spring.jpa.properties.hibernate.jdbc.use_get_generated_keys", () -> "true");
    }

    // -----------------------------
    // Setup before each test
    // -----------------------------
    @BeforeEach
    void setup() throws Exception {
        mockMvc = MockMvcBuilders.standaloneSetup(resourceRestController).build();

        try (Connection conn = dataSource.getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.execute("DROP TABLE IF EXISTS resource");
            stmt.execute("""
                    CREATE TABLE resource (
                        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        file_name VARCHAR(255),
                        s3_key VARCHAR(255),
                        uploaded_at TIMESTAMP
                    )
                    """);
        }

        resourceRepository.deleteAll();
    }

    // -----------------------------
    // POST
    // -----------------------------
    @Test
    void testUploadResource() throws Exception {
        byte[] audioData = "dummy audio data".getBytes();

        doNothing().when(storageService).addFileBytesToStorage(any(String.class), any(byte[].class), anyString());

        mockMvc.perform(post("/resources")
                        .content(audioData)
                        .contentType("audio/mpeg"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").exists());

        List<ResourceEntity> resources = resourceRepository.findAll();
        assertThat(resources).hasSize(1);

        verify(storageService).addFileBytesToStorage(any(String.class), any(byte[].class), anyString());
    }

    // -----------------------------
    // GET /resources/{id}
    // -----------------------------
    @Test
    void testGetResource() throws Exception {
        ResourceEntity entity = new ResourceEntity();
        entity.setFileName("dummy audio");
        entity.setS3Key("s3Key");
        entity.setUploadedAt(LocalDateTime.now());
        GetObjectResponse getObjectResponse = GetObjectResponse.builder().build();
        resourceRepository.save(entity);

        byte[] audioData = "dummy bytes".getBytes();

        when(storageService.retrieveFileFromStorage("s3Key","test-bucket"))
                .thenReturn(ResponseBytes.fromByteArray(getObjectResponse, audioData));

        mockMvc.perform(get("/resources/{id}", entity.getId())
                        .accept(MediaType.valueOf("audio/mpeg")))
                .andExpect(status().isOk());

        ResourceEntity found = resourceRepository.findById(entity.getId()).orElseThrow();
        assertThat(found.getFileName()).isEqualTo("dummy audio");
    }

    // -----------------------------
    // DELETE /resources
    // -----------------------------
    @Test
    void testDeleteResource() throws Exception {
        ResourceEntity entity = new ResourceEntity();
        entity.setFileName("audio1");
        entity.setS3Key("s3Key");
        GetObjectResponse getObjectResponse = GetObjectResponse.builder().build();
        resourceRepository.save(entity);
        byte[] audioData = "dummy bytes".getBytes();

        when(storageService.retrieveFileFromStorage("s3Key", "test-bucket"))
                .thenReturn(ResponseBytes.fromByteArray(getObjectResponse, audioData));
        doNothing().when(songServiceClient).deleteResourceMetadataByResourceId(entity.getId());

        mockMvc.perform(delete("/resources")
                        .param("id", entity.getId().toString()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$").exists());

        assertThat(resourceRepository.findById(entity.getId())).isEmpty();
        verify(storageService).deleteResourceFromStorage(any(String.class), any(String.class));
    }
}
