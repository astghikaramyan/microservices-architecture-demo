server:
  port: 8085

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_SERVER_DEFAULT_ZONE:http://localhost:8761/eureka/}
    registryFetchIntervalSeconds: 30
    heartbeatExecutorThreadPoolSize: 5
    initialInstanceInfoReplicationIntervalSeconds: 40
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
  metrics:
    enabled: true           # enables metrics endpoint
    prometheus:
      enabled: true
    tags:
      application: ${spring.application.name}

spring:
  application:
    name: resource-service

  security:
    oauth2:
      client:
        registration:
          storage-service:
            client-id: storage-client
            client-secret: secret
            authorization-grant-type: client_credentials
            scope: storage.read,storage.write
        provider:
          storage-service:
            token-uri: http://host.docker.internal:9000/oauth2/token

  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:localhost}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${RABBITMQ_DEFAULT_USER:guest}
    password: ${RABBITMQ_DEFAULT_PASS:guest}

  cloud:
    function:
      definition: processSongMetadata
    stream:
      bindings:
        createResourceMetadata-out-0:
          destination: ${APP_RABBITMQ_RESOURCE_EXCHANGE:resource.exchange}
          content-type: text/plain

        processSongMetadata-in-0:
          destination: ${APP_RABBITMQ_METADATA_EXCHANGE:metadata.exchange}
          group: ${APP_RABBITMQ_METADATA_GROUP:processMetadata}
          content-type: text/plain

      rabbit:
        bindings:
          processSongMetadata-in-0:
            consumer:
              acknowledge-mode: AUTO
              auto-bind-dlq: true # automatically create DLQ
              republish-to-dlq: true       # send message to DLQ after retries
              default-requeue-rejected: false
              default-retryable: true      # enable retries for exceptions
              max-attempts: 3              # number of retry attempts
              back-off-initial-interval: 2000 # 2 seconds
              back-off-max-interval: 10000    # 10 seconds
              back-off-multiplier: 2.0

  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5433/RESOURCE_DB}
    username: ${POSTGRES_USER:myuser}
    password: ${POSTGRES_PASSWORD:mypass}
    driver-class-name: org.postgresql.Driver

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none

song:
  service:
    url: ${SONG_SERVICE_URL:http://song-service:8081}

storage-metadata:
  service:
    url: ${STORAGE_METADATA_SERVICE_URL:http://storage-metadata-service:8086}

s3:
  endpoint: ${S3_ENDPOINT:http://localhost:4566}
  access-key: ${S3_ACCESS_KEY:test}
  secret-key: ${S3_SECRET_KEY:test}
  permanent-bucket-name: ${S3_BUCKET_PERMANENT:permanent-resource-files}
  staging-bucket-name: ${S3_BUCKET_STAGING:staging-resource-files}
  permanent-files-path: ${S3_BUCKET_PERMANENT_FILES_PATH:/permanent-resource-files}
  staging-files-path: ${S3_BUCKET_STAGING_FILES_PATH:/staging-resource-files}
  region: ${S3_REGION:us-east-1}

#logstash:
#  host: ${LOGSTASH_HOST:logstash}
#  port: ${LOGSTASH_PORT:5000}
#  queue-size: 512