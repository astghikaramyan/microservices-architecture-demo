{
	"info": {
		"_postman_id": "00bc455a-bfbd-43f3-8ecc-cc555a94cf01",
		"name": "Introduction to Microservices",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7844875",
		"_collection_link": "https://blue-firefly-4764.postman.co/workspace/aad95a3c-5ec0-4d85-97c5-33ef6be200d5/collection/7844875-00bc455a-bfbd-43f3-8ecc-cc555a94cf01?action=share&source=collection_link&creator=7844875"
	},
	"item": [
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "Upload Valid Mp3 Resource (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
									"    var expectedBaseUrl = resourceServiceUrl + \"/resources\";\r",
									"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"if (jsonData.id) {\r",
									"    pm.collectionVariables.set(\"id\", jsonData.id);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'id' field\").to.have.property(\"id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "audio/mpeg"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": "/C:/Users/AstghikAramyan/Downloads/sample-3s.mp3"
							}
						},
						"url": {
							"raw": "{{resource_service_url}}/resources",
							"host": [
								"{{resource_service_url}}"
							],
							"path": [
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Resource (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var expectedBaseUrl = pm.variables.get(\"resource_service_url\") + \"/resources/\";\r",
									"    pm.expect(requestUrl.startsWith(expectedBaseUrl), \"Expected URL to start with the base resource service URL\").to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Path variable 'id' is dynamic\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = pm.variables.get(\"resource_service_url\") + \"/resources/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to include dynamic 'id'\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is 'audio/mpeg'\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'audio/mpeg'\").to.equal(\"audio/mpeg\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length header is present\", function () {\r",
									"    var contentLength = pm.response.headers.get(\"Content-Length\");\r",
									"    pm.expect(contentLength, \"Expected Content-Length header to be present\").to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Length is greater than zero\", function () {\r",
									"    var contentLength = pm.response.headers.get(\"Content-Length\");\r",
									"    pm.expect(parseInt(contentLength), \"Expected Content-Length to be greater than zero\").to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{resource_service_url}}/resources/{{id}}",
							"host": [
								"{{resource_service_url}}"
							],
							"path": [
								"resources",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Song Metadata (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var expectedBaseUrl = pm.variables.get(\"song_service_url\") + \"/songs/\";\r",
									"    pm.expect(requestUrl.startsWith(expectedBaseUrl), \"Expected URL to start with the base song service URL\").to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Path variable 'id' is dynamic\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = pm.variables.get(\"song_service_url\") + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to include dynamic 'id'\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
									"      .to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'id' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'id' field\").to.have.property(\"id\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'name' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'name' field\").to.have.property(\"name\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'artist' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'artist' field\").to.have.property(\"artist\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'album' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'album' field\").to.have.property(\"album\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'duration' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'duration' field\").to.have.property(\"duration\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'year' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'year' field\").to.have.property(\"year\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'resourceId'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Response should not contain 'resourceId' field. Use 'id' field instead\").to.not.match(/\\bresourceId\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'length'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Response should not contain 'length' field. Use 'duration' field instead\").to.not.match(/\\blength\\b/);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{song_service_url}}/songs/{{id}}",
							"host": [
								"{{song_service_url}}"
							],
							"path": [
								"songs",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Resources With Metadata (200)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = resourceServiceUrl + \"/resources?id=\" + dynamicId + \",101,102\";\r",
									"    pm.expect(requestUrl, \"Expected request URL to match the expected structure\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Request parameter includes dynamic 'id'\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    pm.expect(requestUrl, `Expected request URL to include dynamic 'id' value: ${dynamicId}`).to.include(\"id=\" + dynamicId);\r",
									"});\r",
									"\r",
									"pm.test(\"Request parameter includes 101\", function () {\r",
									"    var requestParams = pm.request.url.query.toObject();\r",
									"    pm.expect(requestParams, \"Expected request parameters to include 101\").to.have.property(\"id\").that.includes(\"101\");\r",
									"});\r",
									"\r",
									"pm.test(\"Request parameter includes 102\", function () {\r",
									"    var requestParams = pm.request.url.query.toObject();\r",
									"    pm.expect(requestParams, \"Expected request parameters to include 102\").to.have.property(\"id\").that.includes(\"102\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'ids' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'ids' field\").to.have.property(\"ids\");\r",
									"});\r",
									"\r",
									"pm.test(\"'ids' field is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ids, \"Expected 'ids' to be an array\").to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in 'ids' array is a number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.ids.forEach(function (id) {\r",
									"        pm.expect(id, \"Expected each element in 'ids' to be a number\").to.be.a(\"number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"'ids' array does not contain 101\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ids, \"Expected 'ids' to not contain 101\").to.not.include(101);\r",
									"});\r",
									"\r",
									"pm.test(\"'ids' array does not contain 102\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ids, \"Expected 'ids' to not contain 102\").to.not.include(102);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{resource_service_url}}/resources?id={{id}},101,102",
							"host": [
								"{{resource_service_url}}"
							],
							"path": [
								"resources"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}},101,102"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Resource (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = resourceServiceUrl + \"/resources/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to match the expected structure\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Path variable 'id' is dynamic\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = pm.variables.get(\"resource_service_url\") + \"/resources/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to include dynamic 'id'\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 404\").to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
									"      .to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains '404'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Expected response to contain '404'\").to.include(\"404\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{resource_service_url}}/resources/{{id}}",
							"host": [
								"{{resource_service_url}}"
							],
							"path": [
								"resources",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Song Metadata (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = songServiceUrl + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to match the expected structure\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Path variable 'id' is dynamic\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = pm.variables.get(\"song_service_url\") + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to include dynamic 'id'\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 404\").to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
									"      .to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains '404'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Expected response to contain '404'\").to.include(\"404\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{song_service_url}}/songs/{{id}}",
							"host": [
								"{{song_service_url}}"
							],
							"path": [
								"songs",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Cases",
			"item": [
				{
					"name": "Resource Service",
					"item": [
						{
							"name": "Upload Invalid Resource (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources\";\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "invalid data"
								},
								"url": {
									"raw": "{{resource_service_url}}/resources",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Non-existent Resource (404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var id = \"99999\";\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources/\" + id;\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Path variable should be '99999'\", function () {\r",
											"    var pathVar = pm.request.url.path[pm.request.url.path.length - 1];\r",
											"    pm.expect(pathVar, \"Expected path variable to be '99999'\").to.equal(\"99999\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 404\").to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '404'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '404'\").to.include(\"404\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resource_service_url}}/resources/99999",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invalid ID - Letters (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var id = \"ABC\";\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources/\" + id;\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Path variable should be 'ABC'\", function () {\r",
											"    var pathVar = pm.request.url.path[pm.request.url.path.length - 1];\r",
											"    pm.expect(pathVar, \"Expected path variable to be 'ABC'\").to.equal(\"ABC\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resource_service_url}}/resources/ABC",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources",
										"ABC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invalid ID - Decimal (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var id = \"1.1\";\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources/\" + id;\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Path variable should be '1.1'\", function () {\r",
											"    var pathVar = pm.request.url.path[pm.request.url.path.length - 1];\r",
											"    pm.expect(pathVar, \"Expected path variable to be '1.1'\").to.equal(\"1.1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resource_service_url}}/resources/1.1",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources",
										"1.1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invalid ID - Negative (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var id = \"-1\";\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources/\" + id;\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Path variable should be '-1'\", function () {\r",
											"    var pathVar = pm.request.url.path[pm.request.url.path.length - 1];\r",
											"    pm.expect(pathVar, \"Expected path variable to be '-1'\").to.equal(\"-1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resource_service_url}}/resources/-1",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Invalid ID - Zero (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var id = \"0\";\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources/\" + id;\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Path variable should be '0'\", function () {\r",
											"    var pathVar = pm.request.url.path[pm.request.url.path.length - 1];\r",
											"    pm.expect(pathVar, \"Expected path variable to be '0'\").to.equal(\"0\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{resource_service_url}}/resources/0",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Non-existent Resource (200)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var id = \"?id=99999\";\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources\" + id;\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Request parameter includes '99999'\", function () {\r",
											"    var requestParams = pm.request.url.query.toObject();\r",
											"    pm.expect(requestParams, \"Expected request parameters to include '99999'\").to.have.property(\"id\").that.includes(\"99999\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected JSON object: empty array\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var expectedResponse = {\r",
											"        \"ids\": []\r",
											"    };\r",
											"    pm.expect(responseBody, \"Expected response to match the JSON object\").to.deep.equal(expectedResponse);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{resource_service_url}}/resources?id=99999",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "id",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invalid CSV - Letters (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var id = \"?id=1,2,3,4,V\";\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources\" + id;\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Request parameter includes 'V'\", function () {\r",
											"    var requestParams = pm.request.url.query.toObject();\r",
											"    pm.expect(requestParams, \"Expected request parameters to include 'V'\").to.have.property(\"id\").that.includes(\"V\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{resource_service_url}}/resources?id=1,2,3,4,V",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "id",
											"value": "1,2,3,4,V"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invalid CSV - Length (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var expectedBaseUrl = pm.variables.get(\"resource_service_url\") + \"/resources?id=\";\r",
											"    pm.expect(requestUrl.startsWith(expectedBaseUrl), \"Expected URL to start with the base resource service URL\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Length of 'id' request parameter is greater than 200 characters\", function () {\r",
											"    var requestParams = pm.request.url.query.toObject();\r",
											"    pm.expect(requestParams.id.length, \"Expected 'id' request parameter length to be greater than 200\").to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{resource_service_url}}/resources?id=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources"
									],
									"query": [
										{
											"key": "id",
											"value": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Song Service",
					"item": [
						{
							"name": "Create Song Metadata - Invalid Fields (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
											"    var expectedBaseUrl = songServiceUrl + \"/songs\";\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Request body equals expected JSON object\", function () {\r",
											"    var requestBody = JSON.parse(pm.request.body.raw);\r",
											"    var expectedBody = {\r",
											"        \"id\": 102,\r",
											"        \"name\": \"We are the champions\",\r",
											"        \"artist\": \"Queen\",\r",
											"        \"album\": \"News of the world\",\r",
											"        \"duration\": \"02:77\",\r",
											"        \"year\": \"01977\"\r",
											"    };\r",
											"    pm.expect(requestBody, \"Request body does not match expected JSON object\").to.deep.equal(expectedBody);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.match(/\\b400\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'duration' field\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain 'duration' field\").to.match(/\\bduration\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'year' field\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain 'year' field\").to.match(/\\byear\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'id'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'id' field\").to.not.match(/\\bid\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'name'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'name' field\").to.not.match(/\\bname\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'artist'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'artist' field\").to.not.match(/\\bartist\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'album'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'album' field\").to.not.match(/\\balbum\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'resourceId'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'resourceId' field. Use 'id' field instead\").to.not.match(/\\bresourceId\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'length'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'length' field. Use 'duration' field instead\").to.not.match(/\\blength\\b/);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 102,\n    \"name\": \"We are the champions\",\n    \"artist\": \"Queen\",\n    \"album\": \"News of the world\",\n    \"duration\": \"02:77\",\n    \"year\": \"01977\"\n}"
								},
								"url": {
									"raw": "{{song_service_url}}/songs",
									"host": [
										"{{song_service_url}}"
									],
									"path": [
										"songs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Song Metadata - Missing Fields (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
											"    var expectedBaseUrl = songServiceUrl + \"/songs\";\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Request body equals expected JSON object\", function () {\r",
											"    var requestBody = JSON.parse(pm.request.body.raw);\r",
											"    var expectedBody = {\r",
											"        \"id\": 103,\r",
											"        \"artist\": \"Queen\",\r",
											"        \"album\": \"News of the world\",\r",
											"        \"duration\": \"02:59\",\r",
											"        \"year\": \"1977\"\r",
											"    };\r",
											"    pm.expect(requestBody, \"Request body does not match expected JSON object\").to.deep.equal(expectedBody);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.match(/\\b400\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'name' field\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain 'name' field\").to.match(/\\bname\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'id'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'id' field\").to.not.match(/\\bid\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'artist'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'artist' field\").to.not.match(/\\bartist\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'album'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'album' field\").to.not.match(/\\balbum\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'duration'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'duration' field\").to.not.match(/\\bduration\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'year'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'year'\").to.not.match(/\\byear\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'resourceId'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'resourceId' field. Use 'id' field instead\").to.not.match(/\\bresourceId\\b/);\r",
											"});\r",
											"\r",
											"pm.test(\"Response does not contain 'length'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Response should not contain 'length' field. Use 'duration' field instead\").to.not.match(/\\blength\\b/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 103,\n    \"artist\": \"Queen\",\n    \"album\": \"News of the world\",\n    \"duration\": \"02:59\",\n    \"year\": \"1977\"\n}"
								},
								"url": {
									"raw": "{{song_service_url}}/songs",
									"host": [
										"{{song_service_url}}"
									],
									"path": [
										"songs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Upload Mp3 Before the Next Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"if (jsonData.id) {\r",
											"    pm.collectionVariables.set(\"id\", jsonData.id);\r",
											"}\r",
											"\r",
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/resources\";\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData, \"Expected response to contain 'id' field\").to.have.property(\"id\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "audio/mpeg"
									}
								],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{resource_service_url}}/resources",
									"host": [
										"{{resource_service_url}}"
									],
									"path": [
										"resources"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Song Metadata - Already Exists (409)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
											"    var expectedBaseUrl = songServiceUrl + \"/songs\";\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Request body equals expected JSON object with dynamic id\", function () {\r",
											"    var requestBody = JSON.parse(pm.request.body.raw);\r",
											"    var expectedBody = {\r",
											"        \"id\": parseInt(pm.variables.get(\"id\")),\r",
											"        \"name\": \"We are the champions\",\r",
											"        \"artist\": \"Queen\",\r",
											"        \"album\": \"News of the world\",\r",
											"        \"duration\": \"02:59\",\r",
											"        \"year\": \"1977\"\r",
											"    };\r",
											"    pm.expect(requestBody, \"Request body does not match expected JSON object with dynamic id\").to.deep.equal(expectedBody);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 409\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 409\").to.equal(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '409'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '409'\").to.match(/\\b409\\b/);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{id}},\n    \"name\": \"We are the champions\",\n    \"artist\": \"Queen\",\n    \"album\": \"News of the world\",\n    \"duration\": \"02:59\",\n    \"year\": \"1977\"\n}"
								},
								"url": {
									"raw": "{{song_service_url}}/songs",
									"host": [
										"{{song_service_url}}"
									],
									"path": [
										"songs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Non-Existent Song Metadata (404)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
											"    var expectedBaseUrl = songServiceUrl + \"/songs\" + \"/99999\";\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Path variable should be '99999'\", function () {\r",
											"    var pathVar = pm.request.url.path[pm.request.url.path.length - 1];\r",
											"    pm.expect(pathVar, \"Expected path variable to be '99999'\").to.equal(\"99999\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 404\").to.equal(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '404'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '404'\").to.include(\"404\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{song_service_url}}/songs/99999",
									"host": [
										"{{song_service_url}}"
									],
									"path": [
										"songs",
										"99999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Non-existent Song Metadata (200)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
											"    var id = \"?id=99999\";\r",
											"    var expectedBaseUrl = songServiceUrl + \"/songs\" + id;\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Request parameter includes '99999'\", function () {\r",
											"    var requestParams = pm.request.url.query.toObject();\r",
											"    pm.expect(requestParams, \"Expected request parameters to include '99999'\").to.have.property(\"id\").that.includes(\"99999\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains expected JSON object: empty array\", function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    var expectedResponse = {\r",
											"        \"ids\": []\r",
											"    };\r",
											"    pm.expect(responseBody, \"Expected response to match the JSON object\").to.deep.equal(expectedResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{song_service_url}}/songs?id=99999",
									"host": [
										"{{song_service_url}}"
									],
									"path": [
										"songs"
									],
									"query": [
										{
											"key": "id",
											"value": "99999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invalid CSV - Letters (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var resourceServiceUrl = pm.variables.get(\"song_service_url\");\r",
											"    var expectedBaseUrl = resourceServiceUrl + \"/songs\" + \"?id=1,2,3,4,V\";\r",
											"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
											"});\r",
											"\r",
											"pm.test(\"Request parameter includes 'V'\", function () {\r",
											"    var requestParams = pm.request.url.query.toObject();\r",
											"    pm.expect(requestParams, \"Expected request parameters to include 'V'\").to.have.property(\"id\").that.includes(\"V\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"        .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{song_service_url}}/songs?id=1,2,3,4,V",
									"host": [
										"{{song_service_url}}"
									],
									"path": [
										"songs"
									],
									"query": [
										{
											"key": "id",
											"value": "1,2,3,4,V"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invalid CSV - Length (400)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Request URL matches expected structure\", function () {\r",
											"    var requestUrl = pm.request.url.toString();\r",
											"    var expectedBaseUrl = pm.variables.get(\"song_service_url\") + \"/songs?id=\";\r",
											"    pm.expect(requestUrl.startsWith(expectedBaseUrl), \"Expected URL to start with the base song service URL\").to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Length of 'id' request parameter is greater than 200 characters\", function () {\r",
											"    var requestParams = pm.request.url.query.toObject();\r",
											"    pm.expect(requestParams.id.length, \"Expected 'id' request parameter length to be greater than 200\").to.be.above(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.expect(pm.response.code, \"Expected status code to be 400\").to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is in JSON format\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
											"      .to.equal(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains '400'\", function () {\r",
											"    var responseBody = pm.response.text();\r",
											"    pm.expect(responseBody, \"Expected response to contain '400'\").to.include(\"400\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{song_service_url}}/songs?id=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74",
									"host": [
										"{{song_service_url}}"
									],
									"path": [
										"songs"
									],
									"query": [
										{
											"key": "id",
											"value": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "apps local run test",
			"item": [
				{
					"name": "Upload Valid Mp3 Resource (200) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
									"    var expectedBaseUrl = resourceServiceUrl + \"/resources\";\r",
									"    pm.expect(requestUrl, `Expected URL to match ${expectedBaseUrl}`).to.equal(expectedBaseUrl);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"if (jsonData.id) {\r",
									"    pm.collectionVariables.set(\"id\", jsonData.id);\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'id' field\").to.have.property(\"id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "audio/mpeg"
							}
						],
						"body": {
							"mode": "file",
							"file": {
								"src": ""
							}
						},
						"url": {
							"raw": "{{resource_service_url}}/resources",
							"host": [
								"{{resource_service_url}}"
							],
							"path": [
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Resources With Metadata (200) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var resourceServiceUrl = pm.variables.get(\"resource_service_url\");\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = resourceServiceUrl + \"/resources?id=\" + dynamicId + \",101,102\";\r",
									"    pm.expect(requestUrl, \"Expected request URL to match the expected structure\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Request parameter includes dynamic 'id'\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    pm.expect(requestUrl, `Expected request URL to include dynamic 'id' value: ${dynamicId}`).to.include(\"id=\" + dynamicId);\r",
									"});\r",
									"\r",
									"pm.test(\"Request parameter includes 101\", function () {\r",
									"    var requestParams = pm.request.url.query.toObject();\r",
									"    pm.expect(requestParams, \"Expected request parameters to include 101\").to.have.property(\"id\").that.includes(\"101\");\r",
									"});\r",
									"\r",
									"pm.test(\"Request parameter includes 102\", function () {\r",
									"    var requestParams = pm.request.url.query.toObject();\r",
									"    pm.expect(requestParams, \"Expected request parameters to include 102\").to.have.property(\"id\").that.includes(\"102\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'ids' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'ids' field\").to.have.property(\"ids\");\r",
									"});\r",
									"\r",
									"pm.test(\"'ids' field is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ids, \"Expected 'ids' to be an array\").to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in 'ids' array is a number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    jsonData.ids.forEach(function (id) {\r",
									"        pm.expect(id, \"Expected each element in 'ids' to be a number\").to.be.a(\"number\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"'ids' array does not contain 101\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ids, \"Expected 'ids' to not contain 101\").to.not.include(101);\r",
									"});\r",
									"\r",
									"pm.test(\"'ids' array does not contain 102\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.ids, \"Expected 'ids' to not contain 102\").to.not.include(102);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{resource_service_url}}/resources?id={{id}},101,102",
							"host": [
								"{{resource_service_url}}"
							],
							"path": [
								"resources"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}},101,102"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "test central configuration work",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = songServiceUrl + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to match the expected structure\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Path variable 'id' is dynamic\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = pm.variables.get(\"song_service_url\") + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to include dynamic 'id'\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 404\").to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
									"      .to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains '404'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Expected response to contain '404'\").to.include(\"404\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/config",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"config"
							]
						}
					},
					"response": []
				},
				{
					"name": "test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = songServiceUrl + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to match the expected structure\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Path variable 'id' is dynamic\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = pm.variables.get(\"song_service_url\") + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to include dynamic 'id'\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 404\").to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
									"      .to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains '404'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Expected response to contain '404'\").to.include(\"404\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"index-pattern\",\r\n    \"id\": \"logs-pattern\",\r\n    \"attributes\": {\r\n        \"title\": \"logs-*\",\r\n        \"timeFieldName\": \"timestamp\",\r\n        \"fields\": \"[{\\\"name\\\":\\\"timestamp\\\",\\\"type\\\":\\\"date\\\"},{\\\"name\\\":\\\"service_name\\\",\\\"type\\\":\\\"keyword\\\"},{\\\"name\\\":\\\"thread\\\",\\\"type\\\":\\\"keyword\\\"},{\\\"name\\\":\\\"level\\\",\\\"type\\\":\\\"keyword\\\"},{\\\"name\\\":\\\"logger\\\",\\\"type\\\":\\\"keyword\\\"},{\\\"name\\\":\\\"message\\\",\\\"type\\\":\\\"text\\\"},{\\\"name\\\":\\\"traceId\\\",\\\"type\\\":\\\"keyword\\\"}]\",\r\n        \"name\": \"Logs Data View\"\r\n    }\r\n}\r\n{\r\n    \"type\": \"search\",\r\n    \"id\": \"logs-all\",\r\n    \"attributes\": {\r\n        \"title\": \"All Logs\",\r\n        \"description\": \"All microservice logs from ELK\",\r\n        \"hits\": 0,\r\n        \"columns\": [\r\n            \"timestamp\",\r\n            \"service_name\",\r\n            \"thread\",\r\n            \"level\",\r\n            \"logger\",\r\n            \"message\",\r\n            \"traceId\"\r\n        ],\r\n        \"sort\": [\r\n            [\r\n                \"timestamp\",\r\n                \"desc\"\r\n            ]\r\n        ],\r\n        \"kibanaSavedObjectMeta\": {\r\n            \"searchSourceJSON\": \"{\\\"index\\\":\\\"logs-pattern\\\",\\\"query\\\":{\\\"language\\\":\\\"kuery\\\",\\\"query\\\":\\\"*\\\"},\\\"filter\\\":[]}\"\r\n        }\r\n    }\r\n}\r\n{\r\n    \"type\": \"search\",\r\n    \"id\": \"logs-all\",\r\n    \"attributes\": {\r\n        \"title\": \"All Logs\",\r\n        \"description\": \"All microservice logs from ELK\",\r\n        \"hits\": 0,\r\n        \"columns\": [\r\n            \"timestamp\",\r\n            \"service_name\",\r\n            \"thread\",\r\n            \"level\",\r\n            \"logger\",\r\n            \"message\",\r\n            \"traceId\"\r\n        ],\r\n        \"sort\": [\r\n            [\r\n                \"timestamp\",\r\n                \"desc\"\r\n            ]\r\n        ],\r\n        \"kibanaSavedObjectMeta\": {\r\n            \"searchSourceJSON\": \"{\\\"index\\\":\\\"logs-pattern\\\",\\\"query\\\":{\\\"query\\\":\\\"*\\\",\\\"language\\\":\\\"kuery\\\"},\\\"filter\\\":[]}\"\r\n        }\r\n    }\r\n}\r\n{\r\n    \"type\": \"search\",\r\n    \"id\": \"logs-all\",\r\n    \"attributes\": {\r\n        \"title\": \"All Logs\",\r\n        \"description\": \"All microservice logs from ELK\",\r\n        \"hits\": 0,\r\n        \"columns\": [\r\n            \"timestamp\",\r\n            \"service_name\",\r\n            \"thread\",\r\n            \"level\",\r\n            \"logger\",\r\n            \"message\",\r\n            \"traceId\"\r\n        ],\r\n        \"sort\": [\r\n            [\r\n                \"timestamp\",\r\n                \"desc\"\r\n            ]\r\n        ],\r\n        \"kibanaSavedObjectMeta\": {\r\n            \"searchSourceJSON\": \"{\\\"indexRefName\\\":\\\"kibanaSavedObjectMeta.searchSourceJSON.index\\\",\\\"query\\\":{\\\"query\\\":\\\"*\\\",\\\"language\\\":\\\"kuery\\\"},\\\"filter\\\":[]}\"\r\n        }\r\n    }\r\n}\r\n\r\n{\r\n    \"type\": \"dashboard\",\r\n    \"id\": \"logs-dashboard\",\r\n    \"attributes\": {\r\n        \"title\": \"Microservices Logs\",\r\n        \"panelsJSON\": \"[{\\\"panelIndex\\\":\\\"1\\\",\\\"type\\\":\\\"search\\\",\\\"id\\\":\\\"logs-all\\\",\\\"gridData\\\":{\\\"x\\\":0,\\\"y\\\":0,\\\"w\\\":24,\\\"h\\\":12,\\\"i\\\":\\\"1\\\"},\\\"version\\\":\\\"7.17.0\\\"}]\",\r\n        \"optionsJSON\": \"{\\\"hidePanelTitles\\\":false}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "refresh central config",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var songServiceUrl = pm.variables.get(\"song_service_url\");\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = songServiceUrl + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to match the expected structure\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Path variable 'id' is dynamic\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = pm.variables.get(\"song_service_url\") + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to include dynamic 'id'\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 404\").to.equal(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
									"      .to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains '404'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Expected response to contain '404'\").to.include(\"404\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/actuator/refresh",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"actuator",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Song Metadata (200) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Request URL matches expected structure\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var expectedBaseUrl = pm.variables.get(\"song_service_url\") + \"/songs/\";\r",
									"    pm.expect(requestUrl.startsWith(expectedBaseUrl), \"Expected URL to start with the base song service URL\").to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Path variable 'id' is dynamic\", function () {\r",
									"    var requestUrl = pm.request.url.toString();\r",
									"    var dynamicId = pm.variables.get(\"id\");\r",
									"    var expectedUrl = pm.variables.get(\"song_service_url\") + \"/songs/\" + dynamicId;\r",
									"    pm.expect(requestUrl, \"Expected request URL to include dynamic 'id'\").to.equal(expectedUrl);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code, \"Expected status code to be 200\").to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"), \"Expected Content-Type to be 'application/json'\")\r",
									"      .to.equal(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'id' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'id' field\").to.have.property(\"id\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'name' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'name' field\").to.have.property(\"name\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'artist' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'artist' field\").to.have.property(\"artist\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'album' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'album' field\").to.have.property(\"album\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'duration' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'duration' field\").to.have.property(\"duration\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'year' field and it is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData, \"Expected response to contain 'year' field\").to.have.property(\"year\").and.to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'resourceId'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Response should not contain 'resourceId' field. Use 'id' field instead\").to.not.match(/\\bresourceId\\b/);\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain 'length'\", function () {\r",
									"    var responseBody = pm.response.text();\r",
									"    pm.expect(responseBody, \"Response should not contain 'length' field. Use 'duration' field instead\").to.not.match(/\\blength\\b/);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{song_service_url}}/songs/{{id}}",
							"host": [
								"{{song_service_url}}"
							],
							"path": [
								"songs",
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Storage Metadata Service",
			"item": [
				{
					"name": "Create Storage Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsInJvbGVzIjpbIlJPTEVfQURNSU4iXSwiaWF0IjoxNzYwMzYxODQzLCJleHAiOjE3NjAzNjU0NDN9.LjJbaGn5vOO5JLD6VeWtAkvhV9CjX-tI1YXwmkgvhzikljd1M4LXwrHO_j2HzIdCrt9fc4gfphA5VcZATCCQnvPXTtys18acayP01eS75h9EIBvLsYPpxqgNWTNThenbjJ8W9j_hweExLdO-2odoN4K7k2eLhvsgsJdssPvHS5z-4R4ZQ6UFbZh6uYV6c_gXimm32AEViLcLyy8Z1kf22OveUPc7dGB81NNoBgTXzWZonWgk_MiJI17u_v53gdbx8v1nG6kemlDLFTZa1AM9qVivphhSVNq_31ndkKqtVA7hSyzn0kvzBJVtH102xEe0mWzHtelOni4oNtx6mSZWPQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"storageType\": \"PERMANENT\",\n  \"bucket\": \"bucket_name\",\n  \"path\": \"/files\"\n}\n"
						},
						"url": {
							"raw": "{{storage_metadata_service_url}}/storages",
							"host": [
								"{{storage_metadata_service_url}}"
							],
							"path": [
								"storages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Storage Metadata invalid storage type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"storageType\": \"UNKNOWN\",\n  \"bucket\": \"bucket_name\",\n  \"path\": \"/files\"\n}\n"
						},
						"url": {
							"raw": "{{storage_metadata_service_url}}/storages",
							"host": [
								"{{storage_metadata_service_url}}"
							],
							"path": [
								"storages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Storage Metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImlhdCI6MTc2MDUyNDQwNSwiZXhwIjoxNzYwNTI4MDA1fQ.QD13tQl1O9dgAGcDpE4khWDL_TyrMikdozi2__3XEds",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{storage_metadata_service_url}}/storages",
							"host": [
								"{{storage_metadata_service_url}}"
							],
							"path": [
								"storages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwicm9sZXMiOlsiUk9MRV9VU0VSIl0sImlhdCI6MTc2MDUyNDQwNSwiZXhwIjoxNzYwNTI4MDA1fQ.QD13tQl1O9dgAGcDpE4khWDL_TyrMikdozi2__3XEds",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{storage_metadata_service_url}}/storages?ids=3",
							"host": [
								"{{storage_metadata_service_url}}"
							],
							"path": [
								"storages"
							],
							"query": [
								{
									"key": "ids",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Invalid CSV - Letters (400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{storage_metadata_service_url}}/storages?ids=1,2,3,4,V",
							"host": [
								"{{storage_metadata_service_url}}"
							],
							"path": [
								"storages"
							],
							"query": [
								{
									"key": "ids",
									"value": "1,2,3,4,V"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Invalid CSV - Length (400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{storage_metadata_service_url}}/storages?ids=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74",
							"host": [
								"{{storage_metadata_service_url}}"
							],
							"path": [
								"storages"
							],
							"query": [
								{
									"key": "ids",
									"value": "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "authserver",
			"item": [
				{
					"name": ".well-known/jwks.json",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "secret",
									"type": "string"
								},
								{
									"key": "username",
									"value": "storage-client",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "storage.read storage.write",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:9000/.well-known/jwks.json",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								".well-known",
								"jwks.json"
							]
						},
						"description": "Generated from cURL: curl -X POST \"http://localhost:9000/oauth/token\" \\\r\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\r\n  -u \"my-client:my-secret\" \\\r\n  -d \"grant_type=password&username=admin&password=adminpass&scope=read\"\r\n"
					},
					"response": [
						{
							"name": "grant_type=password",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "storage.read storage.write",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:9000/.well-known/jwks.json",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "9000",
									"path": [
										".well-known",
										"jwks.json"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": null,
							"header": [
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, max-age=0, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "0"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Mon, 13 Oct 2025 13:39:16 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"keys\": [\n        {\n            \"kty\": \"RSA\",\n            \"e\": \"AQAB\",\n            \"kid\": \"56e00142-782c-4501-9e8c-fe80c4afb5c6\",\n            \"n\": \"ukh9bs8IbJeU-dU5T-kadNAwz3Jxsb4HNKem5DfP-XSfIrtEfPuyj8Zp4iMO_Py1IWYnKFm9SUqeg2IUBxwJEghtgzw9VCPz6uECdhW8qMnL5OMzkw-ZzBs0xDb8m6ogDr_yHAC7gdu3WEcwZWHtaUyizuuf5mW470-zFf7VABr0GiMJxH4QVbBYrJZbOW5s2wKhh5ldxZFJTEjy1gZuS1t5MdFcqYIU2fODj_R-SvXQ7eqT6vu2BwX1YtGE-IXxu2Vv-o60IrtVVJX1SjMJmz0LF2GzyB-9TAdw56mCxgbJw6WjHHf4nYpttMDpZ6vK0c_skOwWhkxyPie9O_o0nw\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Retrieve admin token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"admin\",\"password\":\"admin\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9000/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Generated from cURL: curl -X POST http://localhost:9000/auth/login \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"username\":\"admin\",\"password\":\"admin\"}'\r\n"
					},
					"response": []
				},
				{
					"name": "Retrieve user token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\":\"user\",\"password\":\"user\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9000/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Generated from cURL: curl -X POST http://localhost:9000/auth/login \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"username\":\"admin\",\"password\":\"admin\"}'\r\n"
					},
					"response": []
				},
				{
					"name": "Client Credentials Flow",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "storage-client",
									"type": "string"
								},
								{
									"key": "password",
									"value": "secret",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "storage.read storage.write",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:9000/oauth2/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9000",
							"path": [
								"oauth2",
								"token"
							]
						},
						"description": "Generated from cURL: curl -X POST \"http://localhost:9000/oauth2/token\" \\\r\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\r\n  -u \"storage-client:secret\" \\\r\n  -d \"grant_type=client_credentials&scope=storage.read storage.write\""
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "resource_service_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "song_service_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "storage_metadata_service_url",
			"value": "",
			"type": "default"
		}
	]
}