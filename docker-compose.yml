services:
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8761/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8080/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  resource_db:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${RESOURCE_DB}
    ports:
      - "${RESOURCE_DB_EXPOSED_PORT}:5432"
    volumes:
      - ./init-scripts/resource-db/create-table-init.sql:/docker-entrypoint-initdb.d/create-table-init.sql:ro
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${RESOURCE_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  song_db:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${SONG_DB}
    ports:
      - "${SONG_DB_EXPOSED_PORT}:5432"
    volumes:
      - ./init-scripts/song-db/create-table-init.sql:/docker-entrypoint-initdb.d/create-table-init.sql:ro
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${SONG_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  localstack:
    image: localstack/localstack:2.2
    ports:
      - "127.0.0.1:4566:4566"
      - "127.0.0.1:4510-4559:4510-4559"
    environment:
      DEBUG: ${DEBUG:-1}
      DATA_DIR: ${LOCALSTACK_VOLUME_DIR:-./localstack-data}
      SERVICES: s3
      LAMBDA_EXECUTOR: docker
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./localstack-data}:/var/lib/localstack"
      - "./init-scripts/localstack-init:/etc/localstack/init/ready.d:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:4566/_localstack/health || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s


  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "${SPRING_RABBITMQ_PORT}:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST:-/}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  song-service:
    build:
      context: ./song-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_CONFIG_IMPORT: ${CONFIG_URI}
    restart: always
    depends_on:
      song_db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8081/actuator/health | grep UP || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  resource-processor:
    build:
      context: ./resource-processor
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      RESOURCE_SERVICE_URL: ${RESOURCE_SERVICE_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST:-localhost}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT:-5672}
      APP_RABBITMQ_EXCHANGE: ${APP_RABBITMQ_EXCHANGE:-resource.exchange}
      APP_RABBITMQ_GROUP: ${APP_RABBITMQ_GROUP:-createMetadata}
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      song-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8089/actuator/health | grep UP || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  resource-service:
    build:
      context: ./resource-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST:-localhost}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT:-5672}
      APP_RABBITMQ_EXCHANGE: ${APP_RABBITMQ_EXCHANGE:-resource.exchange}
      APP_RABBITMQ_GROUP: ${APP_RABBITMQ_GROUP:-createMetadata}
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      resource_db:
        condition: service_healthy
      localstack:
        condition: service_healthy
      resource-processor:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8085/actuator/health | grep UP || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    environment:
      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: ${SPRING_CLOUD_CONFIG_SERVER_GIT_URI}
      SPRING_CLOUD_CONFIG_SERVER_GIT_CLONE_ON_START: "true"
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SERVER_PORT: 8888
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8888/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    depends_on:
      eureka-server:
        condition: service_healthy

volumes:
  rabbitmq_data: