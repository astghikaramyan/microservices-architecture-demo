services:
  eureka-server:
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8761:8761"

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server

  resource_db:
    image: postgres:17-alpine
    container_name: resource_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${RESOURCE_DB}
    env_file:
      - .env
    ports:
      - "${RESOURCE_DB_EXPOSED_PORT}:5432"
    volumes:
      - ./init-scripts/resource-db/create-table-init.sql:/docker-entrypoint-initdb.d/create-table-init.sql

  song_db:
    image: postgres:17-alpine
    container_name: song_postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${SONG_DB}
    env_file:
      - .env
    ports:
      - "${SONG_DB_EXPOSED_PORT}:5432"
    volumes:
      - ./init-scripts/song-db/create-table-init.sql:/docker-entrypoint-initdb.d/create-table-init.sql

  # LocalStack service for mocking AWS S3
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack:2.2
    ports:
      - "127.0.0.1:4566:4566"
      - "127.0.0.1:4510-4559:4510-4559"
    environment:
      - DEBUG=${DEBUG:-1}
      - DATA_DIR=${LOCALSTACK_VOLUME_DIR:-./localstack-data}
      - SERVICES=s3
      - LAMBDA_EXECUTOR=docker
    env_file:
      - .env
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./localstack-data}:/var/lib/localstack"
      - "./init-scripts/localstack-init:/etc/localstack/init/ready.d"
      - "/var/run/docker.sock:/var/run/docker.sock"
    command: [ "sh", "-c", "localstack start" ]

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "${SPRING_RABBITMQ_PORT}:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST:-/}
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  resource-service:
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST:-localhost}
      APP_RABBITMQ_EXCHANGE: ${APP_RABBITMQ_EXCHANGE:-resource.exchange}
      APP_RABBITMQ_GROUP: ${APP_RABBITMQ_GROUP:-createMetadata}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT:-5672}
    build:
      context: ./resource-service
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - resource_db
      - eureka-server
      - rabbitmq

  resource-processor:
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      RESOURCE_SERVICE_URL: ${RESOURCE_SERVICE_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST:-localhost}
      APP_RABBITMQ_EXCHANGE: ${APP_RABBITMQ_EXCHANGE:-resource.exchange}
      APP_RABBITMQ_GROUP: ${APP_RABBITMQ_GROUP:-createMetadata}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT:-5672}
    build:
      context: ./resource-processor
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - eureka-server
      - resource-service

  song-service:
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
    build:
      context: ./song-service
      dockerfile: Dockerfile
    env_file:
      - .env
    deploy:
      replicas: 2
    depends_on:
      - song_db
      - eureka-server
      - resource-processor

volumes:
  rabbitmq_data: