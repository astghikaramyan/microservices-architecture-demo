services:
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SERVICE_NAME: ${EUREKA_SERVICE_NAME}
      LOG_DIR: ${LOG_DIR}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
    volumes:
      - ./config/logging/log4j2.xml:/app/config/log4j2.xml
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8761/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SERVICE_NAME: ${STORAGE_METADATA_SERVICE_NAME}
      LOG_DIR: ${LOG_DIR}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
    volumes:
      - ./config/logging/log4j2.xml:/app/config/log4j2.xml
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-fsS", "http://localhost:8080/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  resource_db:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${RESOURCE_DB}
    ports:
      - "${RESOURCE_DB_EXPOSED_PORT}:5432"
    volumes:
      - ./init-scripts/resource-db/create-table-init.sql:/docker-entrypoint-initdb.d/create-table-init.sql:ro
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${RESOURCE_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  song_db:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${SONG_DB}
    ports:
      - "${SONG_DB_EXPOSED_PORT}:5432"
    volumes:
      - ./init-scripts/song-db/create-table-init.sql:/docker-entrypoint-initdb.d/create-table-init.sql:ro
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${SONG_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  storage_metadata_db:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${STORAGE_METADATA_DB}
    ports:
      - "${STORAGE_METADATA_DB_EXPOSED_PORT}:5432"
    volumes:
      - ./init-scripts/storage-metadata-db/create-table-init.sql:/docker-entrypoint-initdb.d/create-table-init.sql:ro
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${STORAGE_METADATA_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  localstack:
    image: localstack/localstack:2.2
    ports:
      - "127.0.0.1:4566:4566"
      - "127.0.0.1:4510-4559:4510-4559"
    environment:
      DEBUG: ${DEBUG:-1}
      DATA_DIR: ${LOCALSTACK_VOLUME_DIR:-./localstack-data}
      SERVICES: s3
      LAMBDA_EXECUTOR: docker
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./localstack-data}:/var/lib/localstack"
      - "./init-scripts/localstack-init:/etc/localstack/init/ready.d:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:4566/_localstack/health || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s


  rabbitmq:
    image: rabbitmq:3.12-management
    ports:
      - "${SPRING_RABBITMQ_PORT}:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST:-/}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  song-service:
    build:
      context: ./song-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SPRING_DATASOURCE_URL: ${SONG_DB_URL}
      SPRING_CONFIG_IMPORT: ${CONFIG_URI}
      SERVICE_NAME: ${SONG_SERVICE_NAME}
      LOG_DIR: ${LOG_DIR}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
    volumes:
      - ./config/logging/log4j2.xml:/app/config/log4j2.xml
    restart: always
    depends_on:
      song_db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8081/actuator/health | grep UP || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  resource-processor:
    build:
      context: ./resource-processor
      dockerfile: Dockerfile
    ports:
      - "8089:8089"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      RESOURCE_SERVICE_URL: ${RESOURCE_SERVICE_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET}
      S3_REGION: ${S3_REGION}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST:-localhost}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT:-5672}
      APP_RABBITMQ_RESOURCE_EXCHANGE: ${APP_RABBITMQ_RESOURCE_EXCHANGE:-resource.exchange}
      APP_RABBITMQ_RESOURCE_GROUP: ${APP_RABBITMQ_GROUP:-createResource}
      APP_RABBITMQ_METADATA_EXCHANGE: ${APP_RABBITMQ_METADATA_EXCHANGE:-metadata.exchange}
      APP_RABBITMQ_METADATA_GROUP: ${APP_RABBITMQ_METADATA_GROUP:-processMetadata}
      SERVICE_NAME: ${RESOURCE_PROCESSOR_SERVICE_NAME}
      LOG_DIR: ${LOG_DIR}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
    volumes:
      - ./config/logging/log4j2.xml:/app/config/log4j2.xml
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      song-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8089/actuator/health | grep UP || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  resource-service:
    build:
      context: ./resource-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
      - "5005"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SPRING_DATASOURCE_URL: ${RESOURCE_DB_URL}
      SONG_SERVICE_URL: ${SONG_SERVICE_URL}
      STORAGE_METADATA_SERVICE_URL: ${STORAGE_METADATA_SERVICE_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_PERMANENT: ${S3_BUCKET_PERMANENT}
      S3_BUCKET_STAGING: ${S3_BUCKET_STAGING}
      S3_BUCKET_PERMANENT_FILES_PATH: ${S3_BUCKET_PERMANENT_FILES_PATH}
      S3_BUCKET_STAGING_FILES_PATH: ${S3_BUCKET_STAGING_FILES_PATH}
      S3_REGION: ${S3_REGION}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST:-localhost}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT:-5672}
      APP_RABBITMQ_RESOURCE_EXCHANGE: ${APP_RABBITMQ_RESOURCE_EXCHANGE:-resource.exchange}
      APP_RABBITMQ_RESOURCE_GROUP: ${APP_RABBITMQ_GROUP:-createResource}
      APP_RABBITMQ_METADATA_EXCHANGE: ${APP_RABBITMQ_METADATA_EXCHANGE:-metadata.exchange}
      APP_RABBITMQ_METADATA_GROUP: ${APP_RABBITMQ_METADATA_GROUP:-processMetadata}
      #  - JAVA_TOOL_OPTIONS=--add-opens=java.base/java.lang=ALL-UNNAMED -javaagent:/local/agent/org.jacoco.agent-runtime.jar=destfile=/local/coverage-reports/jacoco.exec -Dspring.profiles.active=if-enabled
      #        - JAVA_TOOL_OPTIONS=-javaagent:/local/agent/seeker-agent.jar -Dseeker.server.url=http://iadd1slascap001.ihgint.global -Dseeker.project.key=avlsb1"
      JAVA_TOOL_OPTIONS: ${DEBUG_CONFIG}
      SERVICE_NAME: ${RESOURCE_SERVICE_NAME}
      LOG_DIR: ${LOG_DIR}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
    volumes:
      - ./config/logging/log4j2.xml:/app/config/log4j2.xml
    restart: always
    depends_on:
      eureka-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      resource_db:
        condition: service_healthy
      localstack:
        condition: service_healthy
      resource-processor:
        condition: service_healthy
      storage-metadata-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8085/actuator/health | grep UP || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  storage-metadata-service:
    build:
      context: ./storageservice
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
      - "5005"
    env_file: .env
    environment:
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SPRING_DATASOURCE_URL: ${STORAGE_METADATA_DB_URL}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET_PERMANENT: ${S3_BUCKET_PERMANENT}
      S3_BUCKET_STAGING: ${S3_BUCKET_STAGING}
      S3_BUCKET_PERMANENT_FILES_PATH: ${S3_BUCKET_PERMANENT_FILES_PATH}
      S3_BUCKET_STAGING_FILES_PATH: ${S3_BUCKET_STAGING_FILES_PATH}
      S3_REGION: ${S3_REGION}
      SERVICE_NAME: ${STORAGE_METADATA_SERVICE_NAME}
      LOG_DIR: ${LOG_DIR}
      LOGSTASH_HOST: ${LOGSTASH_HOST}
      LOGSTASH_PORT: ${LOGSTASH_PORT}
      JAVA_TOOL_OPTIONS: ${DEBUG_CONFIG}
    restart: always
    volumes:
      - ./config/logging/log4j2.xml:/app/config/log4j2.xml
    depends_on:
      eureka-server:
        condition: service_healthy
      storage_metadata_db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8086/actuator/health | grep UP || exit 1" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    environment:
      SPRING_CLOUD_CONFIG_SERVER_GIT_URI: ${SPRING_CLOUD_CONFIG_SERVER_GIT_URI}
      SPRING_CLOUD_CONFIG_SERVER_GIT_CLONE_ON_START: "true"
      EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT}
      SERVER_PORT: 8888
    ports:
      - "8888:8888"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8888/actuator/health | grep UP || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    depends_on:
      eureka-server:
        condition: service_healthy

  # -----------------
  # Monitoring
  # -----------------
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--log.level=info'                               # shows everything
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "2g"
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:9090/-/ready" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # -----------------
  # Grafana
  # -----------------
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_DASHBOARDS_JSON_ENABLED=true
      - GF_DASHBOARDS_JSON_PATH=/etc/grafana/provisioning
      - GF_LOG_LEVEL=info
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_healthy
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # -----------------
  # ELK Stack
  # -----------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - logger.level=info     # enable DEBUG logs
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"'" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.0
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
    environment:
      - LS_JAVA_OPTS=-Xms512m -Xmx512m
      - LOG_LEVEL=info
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600/_node/pipelines?pretty" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - LOGGING_VERBOSE=true   # enables debug-like output
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5601/api/status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # -----------------
  # Kibana Initializer (auto import NDJSON)
  # -----------------
  kibana-setup:
    image: curlimages/curl:8.6.0
    depends_on:
      kibana:
        condition: service_healthy
    volumes:
      - ./config/kibana/kibana-objects.ndjson:/tmp/kibana-objects.ndjson:ro
    entrypoint: > 
      sh -c "echo 'Waiting for Kibana...' && sleep 15 && echo 'Creating Elasticsearch index template...' && curl -X PUT http://elasticsearch:9200/_index_template/logs_template -H 'Content-Type: application/json' -d '{\"index_patterns\":[\"logs-*\"],\"template\":{\"settings\":{\"number_of_shards\":1,\"number_of_replicas\":0},\"mappings\":{\"properties\":{\"service_name\":{\"type\":\"keyword\"},\"thread\":{\"type\":\"keyword\"},\"level\":{\"type\":\"keyword\"},\"logger\":{\"type\":\"keyword\"},\"message\":{\"type\":\"text\"},\"traceId\":{\"type\":\"keyword\"},\"@timestamp\":{\"type\":\"date\"}}}}}' && echo 'Importing Kibana NDJSON objects...' && curl -X POST http://kibana:5601/api/saved_objects/_import?overwrite=true -H 'kbn-xsrf: true' --form file=@/tmp/kibana-objects.ndjson"
    restart: "on-failure"

volumes:
  rabbitmq_data:
  grafana-data:
  es-data: